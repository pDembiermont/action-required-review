{"version":3,"file":"index.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvsources":["../webpack://required-review/./src/codeowners.js","../webpack://required-review/./src/paths.js","../webpack://required-review/./src/reporter.js","../webpack://required-review/./src/requirement.js","../webpack://required-review/./src/reviewers.js","../webpack://required-review/./src/team-members.js","../webpack://required-review/../../.nvm/versions/node/v16.15.1/lib/node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../webpack://required-review/external node-commonjs \"assert\"","../webpack://required-review/external node-commonjs \"fs\"","../webpack://required-review/webpack/bootstrap","../webpack://required-review/webpack/runtime/compat","../webpack://required-review/./src/main.js"],"sourcesContent":["// improve path mapping\nfunction ParseLine(line, enforceOn) {\n    const lineList = line.split(/(\\s+)/).filter(\n        e => { return e.trim().length > 0; }\n    );\n    const linePath = lineList[0]\n    if (enforceOn.includes(linePath)) {\n        const result = {\n            \"paths\": [linePath],\n            \"teams\": lineList.slice(1)\n        }\n        return result\n    }\n\n    return null\n}\n\nasync function ParseCodeOwners(data, enforceOn) {\n    const dataArray = data.split('\\n');\n    const result = await Promise.all(dataArray.map(async line => ParseLine(line, enforceOn)));\n\n    return result.filter(value => !!value);\n}\n\nmodule.exports = ParseCodeOwners;","const core = require( '@actions/core' );\nconst github = require( '@actions/github' );\nconst { WError } = require( 'error' );\n\n/**\n * Fetch the paths in the current PR.\n *\n * @returns {string[]} Paths.\n */\nasync function fetchPaths() {\n\tconst octokit = github.getOctokit( core.getInput( 'token', { required: true } ) );\n\tconst owner = github.context.payload.repository.owner.login;\n\tconst repo = github.context.payload.repository.name;\n\tconst pr = github.context.payload.pull_request.number;\n\n\tconst paths = {};\n\ttry {\n\t\tfor await ( const res of octokit.paginate.iterator( octokit.rest.pulls.listFiles, {\n\t\t\towner: owner,\n\t\t\trepo: repo,\n\t\t\tpull_number: pr,\n\t\t\tper_page: 100,\n\t\t} ) ) {\n\t\t\tres.data.forEach( file => {\n\t\t\t\tpaths[ file.filename ] = true;\n\t\t\t\tif ( file.previous_filename ) {\n\t\t\t\t\tpaths[ file.previous_filename ] = true;\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t} catch ( error ) {\n\t\tthrow new WError(\n\t\t\t`Failed to query ${ owner }/${ repo } PR #${ pr } files from GitHub`,\n\t\t\terror,\n\t\t\t{}\n\t\t);\n\t}\n\n\treturn Object.keys( paths ).sort();\n}\n\nmodule.exports = fetchPaths;\n","const core = require( '@actions/core' );\nconst github = require( '@actions/github' );\nconst { WError } = require( 'error' );\n\nconst STATE_ERROR = 'error';\nconst STATE_FAILURE = 'failure';\nconst STATE_PENDING = 'pending';\nconst STATE_SUCCESS = 'success';\n\n/**\n * Report a status check to GitHub.\n *\n * @param {string} state - One of the `STATE_*` constants.\n * @param {string} description - Description for the status.\n */\nasync function status( state, description ) {\n\tconst octokit = github.getOctokit( core.getInput( 'token', { required: true } ) );\n\tconst owner = github.context.payload.repository.owner.login;\n\tconst repo = github.context.payload.repository.name;\n\tconst req = {\n\t\towner: owner,\n\t\trepo: repo,\n\t\tsha: github.context.payload.pull_request.head.sha,\n\t\tstate: state,\n\t\ttarget_url: `https://github.com/${ owner }/${ repo }/actions/runs/${ github.context.runId }`,\n\t\tdescription: description,\n\t\tcontext: core.getInput( 'status', { required: true } ),\n\t};\n\n\tif ( process.env.CI ) {\n\t\tawait octokit.rest.repos.createCommitStatus( req );\n\t} else {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.dir( req );\n\t}\n}\n\n/**\n * Error class for friendly GitHub Action error reporting.\n *\n * Use it like\n * ```\n * throw ReportError.create( 'Status description', originalError );\n * ```\n */\nclass ReportError extends WError {}\n\nmodule.exports = {\n\tSTATE_ERROR: STATE_ERROR,\n\tSTATE_FAILURE: STATE_FAILURE,\n\tSTATE_PENDING: STATE_PENDING,\n\tSTATE_SUCCESS: STATE_SUCCESS,\n\tstatus: status,\n\tReportError: ReportError,\n};\nmodule.exports.default = module.exports;\n","const assert = require( 'assert' );\nconst core = require( '@actions/core' );\nconst { SError } = require( 'error' );\nconst picomatch = require( 'picomatch' );\nconst fetchTeamMembers = require( './team-members.js' );\n\nclass RequirementError extends SError {}\n\n/**\n * Prints a result set, then returns it.\n *\n * @param {string} label - Label for the set.\n * @param {string[]} items - Items to print. If an empty array, will print `<empty set>` instead.\n * @returns {string[]} `items`.\n */\nfunction printSet( label, items ) {\n\tcore.info( label + ' ' + ( items.length ? items.join( ', ' ) : '<empty set>' ) );\n\treturn items;\n}\n\n/**\n * Build a reviewer team membership filter.\n *\n * @param {object} config - Requirements configuration object being processed.\n * @param {Array|string|object} teamConfig - Team name, or single-key object with a list of teams/objects, or array of such.\n * @param {string} indent - String for indentation.\n * @returns {Function} Function to filter an array of reviewers by membership in the team(s).\n */\nfunction buildReviewerFilter( config, teamConfig, indent ) {\n\tif ( typeof teamConfig === 'string' ) {\n\t\tconst team = teamConfig;\n\t\treturn async function ( reviewers ) {\n\t\t\tconst members = await fetchTeamMembers( team );\n\t\t\treturn printSet(\n\t\t\t\t`${ indent }Members of ${ team }:`,\n\t\t\t\treviewers.filter( reviewer => members.includes( reviewer ) )\n\t\t\t);\n\t\t};\n\t}\n\n\tlet keys;\n\ttry {\n\t\tkeys = Object.keys( teamConfig );\n\t\tassert( keys.length === 1 );\n\t} catch {\n\t\tthrow new RequirementError( 'Expected a team name or a single-keyed object.', {\n\t\t\tconfig: config,\n\t\t\tvalue: teamConfig,\n\t\t} );\n\t}\n\n\tconst op = keys[ 0 ];\n\tlet arg = teamConfig[ op ];\n\n\tswitch ( op ) {\n\t\tcase 'any-of':\n\t\tcase 'all-of':\n\t\t\t// These ops require an array of teams/objects.\n\t\t\tif ( ! Array.isArray( arg ) ) {\n\t\t\t\tthrow new RequirementError( `Expected an array of teams, got ${ typeof arg }`, {\n\t\t\t\t\tconfig: config,\n\t\t\t\t\tvalue: arg,\n\t\t\t\t} );\n\t\t\t}\n\t\t\tif ( ! arg.length === 0 ) {\n\t\t\t\tthrow new RequirementError( 'Expected a non-empty array of teams', {\n\t\t\t\t\tconfig: config,\n\t\t\t\t\tvalue: teamConfig,\n\t\t\t\t} );\n\t\t\t}\n\t\t\targ = arg.map( t => buildReviewerFilter( config, t, `${ indent }  ` ) );\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tthrow new RequirementError( `Unrecognized operation \"${ op }\"`, {\n\t\t\t\tconfig: config,\n\t\t\t\tvalue: teamConfig,\n\t\t\t} );\n\t}\n\n\tif ( op === 'any-of' ) {\n\t\treturn async function ( reviewers ) {\n\t\t\tcore.info( `${ indent }Union of these:` );\n\t\t\treturn printSet( `${ indent }=>`, [\n\t\t\t\t...new Set(\n\t\t\t\t\t( await Promise.all( arg.map( f => f( reviewers, `${ indent }  ` ) ) ) ).flat( 1 )\n\t\t\t\t),\n\t\t\t] );\n\t\t};\n\t}\n\n\tif ( op === 'all-of' ) {\n\t\treturn async function ( reviewers ) {\n\t\t\tcore.info( `${ indent }Union of these, if none are empty:` );\n\t\t\tconst filtered = await Promise.all( arg.map( f => f( reviewers, `${ indent }  ` ) ) );\n\t\t\tif ( filtered.some( a => a.length === 0 ) ) {\n\t\t\t\treturn printSet( `${ indent }=>`, [] );\n\t\t\t}\n\t\t\treturn printSet( `${ indent }=>`, [ ...new Set( filtered.flat( 1 ) ) ] );\n\t\t};\n\t}\n\n\t// WTF?\n\tthrow new RequirementError( `Unrecognized operation \"${ op }\"`, {\n\t\tconfig: config,\n\t\tvalue: teamConfig,\n\t} );\n}\n\n/**\n * Class representing an individual requirement.\n */\nclass Requirement {\n\t/**\n\t * Constructor.\n\t *\n\t * @param {object} config - Object config\n\t * @param {string[]|string} config.paths - Paths this requirement applies to. Either an array of picomatch globs, or the string \"unmatched\".\n\t * @param {Array} config.teams - Team reviews requirements.\n\t */\n\tconstructor( config ) {\n\t\tthis.name = config.name || 'Unnamed requirement';\n\n\t\tif ( config.paths === 'unmatched' ) {\n\t\t\tthis.pathsFilter = null;\n\t\t} else if (\n\t\t\tArray.isArray( config.paths ) &&\n\t\t\tconfig.paths.length > 0 &&\n\t\t\tconfig.paths.every( v => typeof v === 'string' )\n\t\t) {\n\t\t\t// picomatch doesn't combine multiple negated patterns in a way that makes sense here: `!a` and `!b` will pass both `a` and `b`\n\t\t\t// because `a` matches `!b` and `b` matches `!a`. So instead we have to handle the negation ourself: test the (non-negated) patterns in order,\n\t\t\t// with the last match winning. If none match, the opposite of the first pattern's negation is what we need.\n\t\t\tconst filters = config.paths.map( path => {\n\t\t\t\tif ( path.startsWith( '!' ) ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tnegated: true,\n\t\t\t\t\t\tfilter: picomatch( path.substring( 1 ), { dot: true, nonegate: true } ),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tnegated: false,\n\t\t\t\t\tfilter: picomatch( path, { dot: true } ),\n\t\t\t\t};\n\t\t\t} );\n\t\t\tconst first = filters.shift();\n\t\t\tthis.pathsFilter = v => {\n\t\t\t\tlet ret = first.filter( v ) ? ! first.negated : first.negated;\n\t\t\t\tfor ( const filter of filters ) {\n\t\t\t\t\tif ( filter.filter( v ) ) {\n\t\t\t\t\t\tret = ! filter.negated;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t};\n\t\t} else {\n\t\t\tthrow new RequirementError(\n\t\t\t\t'Paths must be a non-empty array of strings, or the string \"unmatched\".',\n\t\t\t\t{\n\t\t\t\t\tconfig: config,\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\tthis.reviewerFilter = buildReviewerFilter( config, { 'any-of': config.teams }, '  ' );\n\t}\n\n\t/**\n\t * Test whether this requirement applies to the passed paths.\n\t *\n\t * @param {string[]} paths - Paths to test against.\n\t * @param {string[]} matchedPaths - Paths that have already been matched. Will be modified if true is returned.\n\t * @returns {boolean} Whether the requirement applies.\n\t */\n\tappliesToPaths( paths, matchedPaths ) {\n\t\tlet matches;\n\t\tif ( this.pathsFilter ) {\n\t\t\tmatches = paths.filter( p => this.pathsFilter( p ) );\n\t\t} else {\n\t\t\tmatches = paths.filter( p => ! matchedPaths.includes( p ) );\n\t\t\tif ( matches.length === 0 ) {\n\t\t\t\tcore.info( \"Matches files that haven't been matched yet, but all files have.\" );\n\t\t\t}\n\t\t}\n\n\t\tif ( matches.length !== 0 ) {\n\t\t\tcore.info( 'Matches the following files:' );\n\t\t\tmatches.forEach( m => core.info( `   - ${ m }` ) );\n\t\t\tmatchedPaths.push( ...matches.filter( p => ! matchedPaths.includes( p ) ) );\n\t\t\tmatchedPaths.sort();\n\t\t}\n\n\t\treturn matches.length !== 0;\n\t}\n\n\t/**\n\t * Test whether this requirement is satisfied.\n\t *\n\t * @param {string[]} reviewers - Reviewers to test against.\n\t * @returns {boolean} Whether the requirement is satisfied.\n\t */\n\tasync isSatisfied( reviewers ) {\n\t\tcore.info( 'Checking reviewers...' );\n\t\treturn ( await this.reviewerFilter( reviewers ) ).length > 0;\n\t}\n}\n\nmodule.exports = Requirement;\n","const core = require( '@actions/core' );\nconst github = require( '@actions/github' );\nconst { WError } = require( 'error' );\n\n/**\n * Fetch the reviewers approving the current PR.\n *\n * @returns {string[]} Reviewers.\n */\nasync function fetchReviewers() {\n\tconst octokit = github.getOctokit( core.getInput( 'token', { required: true } ) );\n\tconst owner = github.context.payload.repository.owner.login;\n\tconst repo = github.context.payload.repository.name;\n\tconst pr = github.context.payload.pull_request.number;\n\n\tconst reviewers = new Set();\n\ttry {\n\t\tfor await ( const res of octokit.paginate.iterator( octokit.rest.pulls.listReviews, {\n\t\t\towner: owner,\n\t\t\trepo: repo,\n\t\t\tpull_number: pr,\n\t\t\tper_page: 100,\n\t\t} ) ) {\n\t\t\tres.data.forEach( review => {\n\t\t\t\t// GitHub may return more than one review per user, but only counts the last non-comment one for each.\n\t\t\t\t// \"APPROVED\" allows merging, while \"CHANGES_REQUESTED\" and \"DISMISSED\" do not.\n\t\t\t\tif ( review.state === 'APPROVED' ) {\n\t\t\t\t\treviewers.add( review.user.login );\n\t\t\t\t} else if ( review.state !== 'COMMENTED' ) {\n\t\t\t\t\treviewers.delete( review.user.login );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t} catch ( error ) {\n\t\tthrow new WError(\n\t\t\t`Failed to query ${ owner }/${ repo } PR #${ pr } reviewers from GitHub`,\n\t\t\terror,\n\t\t\t{}\n\t\t);\n\t}\n\n\treturn [ ...reviewers ].sort();\n}\n\nmodule.exports = fetchReviewers;\n","const core = require( '@actions/core' );\nconst github = require( '@actions/github' );\nconst { WError } = require( 'error' );\n\nconst cache = {};\n\n/**\n * Fetch the members of a team for the purpose of verifying a review Requirement.\n * Special case: Names prefixed with @ are considered to be a one-member team with the named GitHub user.\n *\n * @param {string} team - GitHub team slug, or @ followed by a GitHub user name.\n * @returns {string[]} Team members.\n */\nasync function fetchTeamMembers( team ) {\n\t// Handle @singleuser virtual teams.\n\tif ( team.startsWith( '@' ) ) {\n\t\treturn [ team.slice( 1 ) ];\n\t}\n\n\tif ( cache[ team ] ) {\n\t\treturn cache[ team ];\n\t}\n\n\tconst octokit = github.getOctokit( core.getInput( 'token', { required: true } ) );\n\tconst org = github.context.payload.repository.owner.login;\n\n\tlet members = [];\n\ttry {\n\t\tfor await ( const res of octokit.paginate.iterator( octokit.rest.teams.listMembersInOrg, {\n\t\t\torg: org,\n\t\t\tteam_slug: team,\n\t\t\tper_page: 100,\n\t\t} ) ) {\n\t\t\tmembers = members.concat( res.data.map( v => v.login ) );\n\t\t}\n\t} catch ( error ) {\n\t\tthrow new WError( `Failed to query ${ org } team ${ team } from GitHub`, error, {} );\n\t}\n\n\tcache[ team ] = members;\n\treturn members;\n}\n\nmodule.exports = fetchTeamMembers;\n",null,"module.exports = require(\"assert\");","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","const fs = require('fs');\nconst core = require('@actions/core');\nconst yaml = require('js-yaml');\nconst reporter = require('./reporter.js');\nconst Requirement = require('./requirement.js');\nconst ParseCodeOwners = require('./codeowners.js');\n\n/**\n * Load the requirements yaml file.\n *\n * @returns {Requirement[]} Requirements.\n */\nasync function getRequirements() {\n\tlet requirementsString = core.getInput('requirements');\n\tlet enforceOnString = core.getInput('enforce_on')\n\tlet isYaml = true\n\tvar enforceOn\n\n\tif (!enforceOnString) {\n\t\tenforceOn = []\n\t} else {\n\n\t\tenforceOn = yaml.load(enforceOnString, {\n\t\t\tonWarning: w => core.warning(`Yaml: ${w.message}`),\n\t\t});\n\n\t\tif (!Array.isArray(enforceOn)) {\n\t\t\tthrow new Error('enforce_on should be an array');\n\t\t}\n\n\t}\n\n\n\tif (!requirementsString) {\n\t\tconst filename = core.getInput('requirements-file');\n\n\t\tif (!filename) {\n\t\t\tthrow new reporter.ReportError(\n\t\t\t\t'Requirements are not found',\n\t\t\t\tnew Error('Either `requirements` or `requirements-file` input is required'),\n\t\t\t\t{}\n\t\t\t);\n\t\t}\n\n\t\tif (filename.trim() === 'CODEOWNERS') {\n\t\t\tisYaml = false\n\t\t}\n\n\n\t\ttry {\n\t\t\trequirementsString = fs.readFileSync(filename, 'utf8');\n\t\t} catch (error) {\n\t\t\tthrow new reporter.ReportError(\n\t\t\t\t`Requirements file ${filename} could not be read`,\n\t\t\t\terror,\n\t\t\t\t{}\n\t\t\t);\n\t\t}\n\t} else if (core.getInput('requirements-file')) {\n\t\tcore.warning('Ignoring input `requirements-file` because `requirements` was given');\n\t}\n\n\tvar requirements = []\n\ttry {\n\t\tif (isYaml) {\n\t\t\tcore.info(\"Parsing Yaml\")\n\t\t\trequirements = yaml.load(requirementsString, {\n\t\t\t\tonWarning: w => core.warning(`Yaml: ${w.message}`),\n\t\t\t});\n\t\t} else {\n\t\t\tcore.info(\"Parsing Codeowners\")\n\t\t\trequirements = ParseCodeOwners(requirementsString, enforceOn);\n\t\t}\n\n\t\tif (!Array.isArray(requirements)) {\n\t\t\tthrow new Error(`Requirements file does not contain an array. Input: ${requirements}`);\n\t\t}\n\n\t\treturn requirements.map((r, i) => new Requirement({ name: `#${i}`, ...r }));\n\n\t} catch (error) {\n\n\t\terror[Symbol.toStringTag] = 'Error'; // Work around weird check in WError.\n\t\tthrow new reporter.ReportError('Requirements are not valid', error, {});\n\n\t}\n}\n\n/**\n * Action entry point.\n */\nasync function main() {\n\ttry {\n\t\tconst requirements = await getRequirements();\n\t\tcore.startGroup(`Loaded ${requirements.length} review requirement(s)`);\n\n\t\tconst reviewers = await require('./reviewers.js')();\n\t\tcore.startGroup(`Found ${reviewers.length} reviewer(s)`);\n\t\treviewers.forEach(r => core.info(r));\n\t\tcore.endGroup();\n\n\t\tconst paths = await require('./paths.js')();\n\t\tcore.startGroup(`PR affects ${paths.length} file(s)`);\n\t\tpaths.forEach(p => core.info(p));\n\t\tcore.endGroup();\n\n\t\tconst matchedPaths = [];\n\t\tlet ok = true;\n\t\tfor (let i = 0; i < requirements.length; i++) {\n\t\t\tconst r = requirements[i];\n\t\t\tcore.startGroup(`Checking requirement \"${r.name}\"...`);\n\t\t\tif (!r.appliesToPaths(paths, matchedPaths)) {\n\t\t\t\tcore.endGroup();\n\t\t\t\tcore.info(`Requirement \"${r.name}\" does not apply to any files in this PR.`);\n\t\t\t} else if (await r.isSatisfied(reviewers)) {\n\t\t\t\tcore.endGroup();\n\t\t\t\tcore.info(`Requirement \"${r.name}\" is satisfied by the existing reviews.`);\n\t\t\t} else {\n\t\t\t\tok = false;\n\t\t\t\tcore.endGroup();\n\t\t\t\tcore.error(`Requirement \"${r.name}\" is not satisfied by the existing reviews.`);\n\t\t\t}\n\t\t}\n\t\tif (ok) {\n\t\t\tawait reporter.status(reporter.STATE_SUCCESS, 'All required reviews have been provided!');\n\t\t} else {\n\t\t\tawait reporter.status(\n\t\t\t\tcore.getBooleanInput('fail') ? reporter.STATE_FAILURE : reporter.STATE_PENDING,\n\t\t\t\treviewers.length ? 'Awaiting more reviews...' : 'Awaiting reviews...'\n\t\t\t);\n\t\t}\n\t} catch (error) {\n\t\tlet err, state, description;\n\t\tif (error instanceof reporter.ReportError) {\n\t\t\terr = error.cause();\n\t\t\tstate = reporter.STATE_FAILURE;\n\t\t\tdescription = error.message;\n\t\t} else {\n\t\t\terr = error;\n\t\t\tstate = reporter.STATE_ERROR;\n\t\t\tdescription = 'Action encountered an error';\n\t\t}\n\t\tcore.setFailed(err.message);\n\t\tcore.info(err.stack);\n\t\tif (core.getInput('token') && core.getInput('status')) {\n\t\t\tawait reporter.status(state, description);\n\t\t}\n\t}\n}\n\nmain();\n"],"names":[],"sourceRoot":""}